/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp ESC>;
        };

        combo_3 {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&to 2>;
        };

        combo_ent {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp RET>;
        };

        combo_1 {
            timeout-ms = <50>;
            key-positions = <30 33>;
            bindings = <&to 3>;
        };

        combo_1_high {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&to 3>;
        };

        combo_g {
            timeout-ms = <15>;
            key-positions = <12 13>;
            bindings = <&kp G>;
            layers = <1>;
        };

        combo_j {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp J>;
            layers = <1>;
        };

        combo_p {
            timeout-ms = <15>;
            key-positions = <16 17>;
            bindings = <&kp P>;
            layers = <1>;
        };

        combo_b {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp B>;
            layers = <1>;
        };

        combo_scol {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp SEMI>;
            layers = <1>;
        };

        combo_com {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp COMMA>;
            layers = <1>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp MINUS>;
            layers = <1>;
        };

        combo_slsh {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp SLASH>;
            layers = <1>;
        };

        combo_sqt {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp SQT>;
            layers = <3>;
        };

        combo_dqt {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp DQT>;
            layers = <3>;
        };

        combo_bslh {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp BSLH>;
            layers = <3>;
        };

        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LBKT>;
            layers = <3>;
        };

        combo_n0 {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp N0>;
            layers = <3>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LALT>;
            layers = <2>;
        };

        combo_del {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp DEL>;
            layers = <2>;
        };

        combo_left {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LEFT>;
            layers = <2>;
        };

        combo_lclk {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&mkp LCLK>;
            layers = <2>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hs: homerow_shifts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hsl: homerow_shifts_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&to>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bl: layertap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERTAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&to>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E       &kp R                   &kp T                 &kp Y      &kp U       &kp I       &kp O         &kp P
&kp A  &kp S  &hm LALT D  &hm LGUI F              &kp G                 &kp H      &hm RGUI J  &hm RALT K  &kp L         &kp SEMICOLON
&kp Z  &kp X  &kp C       &kp V                   &mt LC(LS(LALT)) B    &kp N      &kp M       &kp COMMA   &td EXCL DOT  &kp RS(SLASH)
                          &mt LC(LS(LALT)) SPACE  &kp LSHFT             &kp LCTRL  &to 1
            >;
        };

        left_layer {
            bindings = <
&kp ESC    &kp AT_SIGN  &kp HASH   &kp DLLR      &kp PERCENT          &kp CARET             &kp AMPERSAND         &kp ASTERISK           &td MINUS UNDERSCORE  &kp BACKSPACE
&kp TAB    &kp EQUAL    &kp MINUS  &kp PLUS      &kp SQT              &kp NON_US_BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE              &kp ENTER
&kp TILDE  &kp GRAVE    &kp SLASH  &kp ASTERISK  &kp DOUBLE_QUOTES    &kp LEFT_BRACKET      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RBKT              &to 3
                                   &to 0         &kp LEFT_SHIFT       &kp LEFT_ALT          &to 2
            >;
        };

        tri_layer {
            bindings = <
&td LA(LG(ESCAPE)) ESC  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &trans                     &kp K_BACK     &kp LC(LS(TAB))        &kp LC(TAB)    &kp K_FORWARD  &kp BACKSPACE
&td LG(TAB) TAB         &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &hm LEFT_COMMAND DELETE    &td HOME LEFT  &hm LEFT_COMMAND DOWN  &hm RALT UP    &td END RIGHT  &kp ENTER
&kp LSHIFT              &mkp RCLK       &msc SCRL_UP    &msc SCRL_DOWN   &trans                     &mkp LCLK      &td HOME PG_DN         &td END PG_UP  &trans         &trans
                                                        &to 0            &kp LEFT_COMMAND           &kp LEFT_ALT   &to 1
            >;
        };

        right_layer {
            bindings = <
&kp ESCAPE  &kp C_PP      &kp C_PREV            &kp C_NEXT            &kp UNDERSCORE      &kp MINUS     &kp N7        &kp N8  &kp N9        &kp BACKSPACE
&kp TAB     &kp SLASH     &kp C_VOL_DN          &kp C_VOL_UP          &kp PLUS            &kp EQUAL     &kp NUMBER_4  &kp N5  &kp N6        &kp ENTER
&sys_reset  &kp ASTERISK  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp DOT             &kp NUMBER_0  &kp N1        &kp N2  &kp NUMBER_3  &to 2
                                                &to 0                 &kp LEFT_COMMAND    &kp LEFT_ALT  &to 1
            >;
        };

        bt {
            bindings = <
&trans       &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans
&bootloader  &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans
&bt BT_PRV   &bt BT_NXT  &bt BT_CLR  &trans  &to 1     &to 3   &trans  &trans  &trans  &trans
                                     &to 1   &trans    &trans  &to 3
            >;
        };
    };
};
